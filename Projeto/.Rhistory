ggcorrplot(cor.matriz, hc.order = T, lab = T, type = "lower")
# Separa os dados em treino e teste
set.seed(100)
index = sample(1:nrow(dataset), 0.7*nrow(dataset))
train = dataset[index,] # Create the training data
test = dataset[-index,] # Create the test data
dim(train)
dim(test)
# Função para calcular as métricas RMSE e R-squared
eval_metrics = function(model, df, predictions, target){
resids = df[,target] - predictions
resids2 = resids**2
N = length(predictions)
r2 = as.character(round(summary(model)$r.squared, 2))
adj_r2 = as.character(round(summary(model)$adj.r.squared, 2))
cat("Adjusted R-squared: ",adj_r2, " ") #Adjusted R-squared
cat("RMSE: ",as.character(round(sqrt(sum(resids2)/N), 2))) #RMSE
}
# Treina um modelo regressão linear para predizer os preços
modelo1 <- lm(price ~ neighbourhood_group + room_type + minimum_nights + availability_365, data = train)
summary(modelo1)
Coeficientes = data.frame(Coeficientes = sort(modelo1$coefficients))
predictions = predict(modelo1, newdata = train)
eval_metrics(modelo1, train, predictions, target = 'price')
predictions = predict(modelo1, newdata = test)
eval_metrics(modelo1, test, predictions, target = 'price')
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
bronx <- dataset %>% filter(neighbourhood_group == "Bronx", room_type == "Entire home")
bronx100 <- bronx %>% filter(price > 100)
# Plota gráfico da regressão linear
visreg(modelo1, "neighbourhood_group", gg = TRUE)
visreg(modelo1, "room_type", gg = TRUE)
visreg(modelo1, "minimum_nights", gg = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(chemCal)
library(visreg)
library(DT)
pacotes <- data.frame(Pacotes = c("library(knitr)", "library(dplyr)", "library(ggplot2)", "library(ggcorrplot)", "library(visreg)", "library(DT)"),
Descrição = c("Geração de Tabelas", "Manipulação de Dataframes", "Visualização de Dados", "Visualização de Matriz de Correlação", "Visualização de Modelos de Regressão", "Geração de Tabelas"))
kable(pacotes)
dataset <- read.csv("AB_NYC_2019.csv", na.strings=c("","NA"))
str(dataset)
descricao <- c("ID da Postagem",
"Título da Postagem",
"ID do Anfitrião",
"Nome do Anfitrião",
"Localização(Grupo de Bairros)",
"Bairro",
"Latitude",
"Longitude",
"Tipo de Aluguel",
"Preço",
"Noites Mínimas",
"Número de reviews",
"Data do último review",
"Quantidade de reviews por mês",
"Quantidade de aluguéis feitos pelo anfitrião",
"Quantidade de dias disponíveis durante o ano")
tabela <- data.frame(Parâmentros = colnames(dataset), Descrição = descricao)
kable(tabela)
dataset <- read.csv("AB_NYC_2019.csv", na.strings=c("","NA"))
datatable(dataset[1000,])
dataset <- read.csv("AB_NYC_2019.csv", na.strings=c("","NA"))
datatable(dataset[0:1000,])
dataset <- read.csv("AB_NYC_2019.csv", na.strings=c("","NA"))
datatable(dataset[0:1000,], style = "bootstrap4")
summary(dataset)
dataset$reviews_per_month[which(is.na(dataset$reviews_per_month))] <- 0
dataset$name[which(is.na(dataset$name))] <- "NoName"
dataset$host_name[which(is.na(dataset$host_name))] <- "NoName"
dataset$last_review[which(is.na(dataset$last_review))] <- "NotReviewed"
dataset$reviews_per_month[which(is.na(dataset$reviews_per_month))] <- 0
dataset$name[which(is.na(dataset$name))] <- "NoName"
dataset$host_name[which(is.na(dataset$host_name))] <- "NoName"
dataset$last_review[which(is.na(dataset$last_review))] <- "NotReviewed"
# Verifica distribuição dos preços
hist(dataset$price, main = "Histograma da Preços")
# Verifica distribuição dos preços
hist(dataset$price, main = "Histograma da Preços", xlab = "Preços", ylab = "Frequência")
# Verifica distribuição dos preços
hist(dataset$price, main = "Histograma da Preços", xlab = "Preços", ylab = "Frequência", xlim = 2000)
# Verifica distribuição dos preços
hist(dataset$price, main = "Histograma da Preços", xlab = "Preços", ylab = "Frequência")
# Verifica distribuição dos preços abaixo de 1000
hist(Prices[Prices<1000])
hist(dataset$price[dataset$price<1000])
hist(dataset$price[dataset$price<1000])
hist(dataset$price[dataset$price<1000], main = "Histograma da Preços abaixo de 1000", xlab = "Preços", ylab = "Frequência")
hist(dataset$price[dataset$price<300], main = "Histograma da Preços abaixo de 300", xlab = "Preços", ylab = "Frequência")
hist(dataset$price[dataset$price<250], main = "Histograma da Preços abaixo de 300", xlab = "Preços", ylab = "Frequência")
hist(dataset$price[dataset$price<250], main = "Histograma da Preços abaixo de 300", xlab = "Preços", ylab = "Frequência")
cat("Quantidade de Aluguéis com preço abaixo de 250 dólares:", length(dataset$price[dataset$price<250]))
hist(dataset$price[dataset$price<250], main = "Histograma de Preços abaixo de 250", xlab = "Preços", ylab = "Frequência")
cat("Quantidade de Aluguéis com preço abaixo de 250 dólares:", length(dataset$price[dataset$price<250]))
hist(dataset$price[dataset$price<250], main = "Histograma de Preços abaixo de 250", xlab = "Preços", ylab = "Frequência")
cat("Quantidade de Aluguéis com preço abaixo de 250 dólares:", length(dataset$price[dataset$price<250]))
hist(dataset$price[dataset$price<250], main = "Histograma de Preços abaixo de 250", xlab = "Preços", ylab = "Frequência")
cat("Quantidade de Aluguéis com preço abaixo de 250 dólares:", length(dataset$price[dataset$price<250]))
cat(length(dataset$price))
# Verifica a quantidade alugueis por bairro em ordem decrescente
neighbourhood.count <- dataset %>% group_by(neighbourhood) %>% summarise(Count=n())
neighbourhood.count <- neighbourhood.count[order(neighbourhood.count$Count, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Qtd")
kable(neighbourhood.count)
barplot(neighbourhood.count$Count,
las=2,
col = rainbow(10),
names.arg = neighbourhood.count$neighbourhood,
main = "Gráfico de Quatidade de Aluguéis por Bairro") #Plota o gráfico das palavra
# Verifica a quantidade alugueis por bairro em ordem decrescente
neighbourhood.count <- dataset %>% group_by(neighbourhood) %>% summarise(Count=n())
neighbourhood.count <- neighbourhood.count[order(neighbourhood.count$Count, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Qtd")
kable(neighbourhood.count)
barplot(neighbourhood.count$Qtd,
las=2,
col = rainbow(10),
names.arg = neighbourhood.count$neighbourhood,
main = "Gráfico de Quatidade de Aluguéis por Bairro") #Plota o gráfico das palavra
# Verifica a quantidade alugueis por bairro em ordem decrescente
neighbourhood.count <- dataset %>% group_by(neighbourhood) %>% summarise(Count=n())
neighbourhood.count <- neighbourhood.count[order(neighbourhood.count$Count, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Qtd")
kable(neighbourhood.count)
barplot(neighbourhood.count$Qtd,
las=2,
col = rainbow(10),
names.arg = neighbourhood.count$Bairro,
main = "Gráfico de Quatidade de Aluguéis por Bairro") #Plota o gráfico das palavra
# Verifica a quantidade alugueis por bairro em ordem decrescente
neighbourhood.count <- dataset %>% group_by(neighbourhood) %>% summarise(Count=n())
neighbourhood.count <- neighbourhood.count[order(neighbourhood.count$Count, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Qtd")
kable(neighbourhood.count[0:10,])
barplot(neighbourhood.count$Qtd,
las=2,
col = rainbow(10),
names.arg = neighbourhood.count$Bairro,
main = "Gráfico de Quatidade de Aluguéis por Bairro") #Plota o gráfico das palavra
# Verifica a quantidade alugueis por bairro em ordem decrescente
neighbourhood.count <- dataset %>% group_by(neighbourhood) %>% summarise(Count=n())
neighbourhood.count <- neighbourhood.count[order(neighbourhood.count$Count, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Qtd")
kable(neighbourhood.count[0:10,])
barplot(neighbourhood.count$Qtd[0:20],
las=2,
col = rainbow(10),
names.arg = neighbourhood.count$Bairro[0:20],
main = "Gráfico de Quatidade de Aluguéis por Bairro") #Plota o gráfico das palavra
# Verifica a quantidade alugueis por bairro em ordem decrescente
neighbourhood.count <- dataset %>% group_by(neighbourhood) %>% summarise(Count=n())
neighbourhood.count <- neighbourhood.count[order(neighbourhood.count$Count, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Qtd")
kable(neighbourhood.count[0:10,], caption = "Tabela de Quantidade de Aluguéis por Bairro")
barplot(neighbourhood.count$Qtd[0:20],
las=2,
col = rainbow(10),
names.arg = neighbourhood.count$Bairro[0:20],
main = "Gráfico de Quatidade de Aluguéis por Bairro") #Plota o gráfico
neighbourhood.mean <- dataset %>% group_by(neighbourhood) %>% summarise(Média=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
neighbourhood.mean <- neighbourhood.mean[order(neighbourhood.mean$Média, decreasing = T),]
kable(neighbourhood.mean[0:10], caption = "Tabela de 10 Bairros com maior média de preços")
neighbourhood.mean <- dataset %>% group_by(neighbourhood) %>% summarise(Média=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
neighbourhood.mean <- neighbourhood.mean[order(neighbourhood.mean$Média, decreasing = T),]
View(neighbourhood.mean)
neighbourhood.mean <- dataset %>% group_by(neighbourhood) %>% summarise(Média=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
neighbourhood.mean <- neighbourhood.mean[order(neighbourhood.mean$Média, decreasing = T),]
kable(neighbourhood.mean[0:10,], caption = "Tabela de 10 Bairros com maior média de preços")
neighbourhood.mean <- dataset %>% group_by(neighbourhood) %>% summarise(Média=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
neighbourhood.mean <- neighbourhood.mean[order(neighbourhood.mean$Média, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Média")
kable(neighbourhood.mean[0:10,], caption = "Tabela de 10 Bairros com maior média de preços")
hist(dataset$minimum_nights, main = "Histograma de Noites mínimas", xlab = "Preços", ylab = "Frequência")
summary(dataset$minimum_nights)
hist(dataset$minimum_nights[dataset$minimum_nights<10], main = "Histograma de Noites Mínimas acima de 10", xlab = "Noites Mínimas", ylab = "Frequência")
hist(dataset$minimum_nights[dataset$minimum_nights<30], main = "Histograma de Noites Mínimas acima de 10", xlab = "Noites Mínimas", ylab = "Frequência")
hist(dataset$minimum_nights[dataset$minimum_nights>30], main = "Histograma de Noites Mínimas acima de 10", xlab = "Noites Mínimas", ylab = "Frequência")
hist(dataset$minimum_nights[dataset$minimum_nights<30], main = "Histograma de Noites Mínimas acima de 10", xlab = "Noites Mínimas", ylab = "Frequência")
hist(dataset$minimum_nights[dataset$minimum_nights<30], main = "Histograma de Noites Mínimas abaixo de 30", xlab = "Noites Mínimas", ylab = "Frequência")
cat("Quantidade de noites mínimas acima de 30 dias:", length(dataset$minimum_nights[dataset$minimum_nights>30]))
cor.matriz <- cor(select(dataset, -neighbourhood, -neighbourhood_group, -room_type), use = "complete.obs") #Retira colunas não numéricas
summary(dataset)
cor.matriz <- cor(select(dataset, -neighbourhood, -neighbourhood_group, -room_type), use = "complete.obs") #Retira colunas não numéricas
dataset <- select(dataset, -id, -host_id,-host_name, -name, -last_review, -latitude, -longitude) # Remove colunas não interessantes
summary(dataset)
cor.matriz <- cor(select(dataset, -neighbourhood, -neighbourhood_group, -room_type), use = "complete.obs") #Retira colunas não numéricas
round(cor.matriz, 2)
ggcorrplot(cor.matriz, hc.order = T, lab = T, type = "lower")
predictions = predict(modelo, newdata = train)
modelo <- lm(price ~ neighbourhood_group + room_type + minimum_nights + availability_365, data = train)
summary(modelo)
predictions = predict(modelo, newdata = train)
eval_metrics(modelo, train, predictions, target = 'price')
predictions = predict(modelo, newdata = test)
eval_metrics(modelo1, test, predictions, target = 'price')
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(visreg)
library(DT)
# 42669 aluguéis
dataset <- read.csv("AB_NYC_2019.csv", na.strings=c("","NA"))
View(dataset)
str(dataset)
summary(dataset)
#Substitui valores NA's para valores padrões
dataset$reviews_per_month[which(is.na(dataset$reviews_per_month))] <- 0
dataset$name[which(is.na(dataset$name))] <- "NoName"
dataset$host_name[which(is.na(dataset$host_name))] <- "NoName"
dataset$last_review[which(is.na(dataset$last_review))] <- "NotReviewed"
summary(dataset)
dataset <- select(dataset, -id, -host_id,-host_name, -name, -last_review, -latitude, -longitude) # Remove colunas não interessantes
dataset$room_type[which(dataset$room_type == "Entire home/apt")] <- "Entire home"
Prices <- dataset$price
# Verifica distribuição dos preços
hist(dataset$price)
# Verifica distribuição dos preços abaixo de 1000
hist(Prices[Prices<1000])
# Conta quantos preços acima de 1000 existem
price.count.1000 <- dataset$price[dataset$price > 1000]
length(price.count.1000) # A maioria dos preços é abaixo de 1000
# Remove dados com preço acima de 1000
dataset <- filter(dataset,price<1000)
summary(dataset)
# Verifica distribuição dos preços
Prices <- dataset$price[dataset$price<300]
hist(Prices)
dataset <- filter(dataset,price<300)
dataset <- filter(dataset,price>0)
hist(dataset$price)
summary(dataset)
# Verifica a quantidade alugueis por bairro em ordem decrescente
neighbourhood.count <- dataset %>% group_by(neighbourhood) %>% summarise(Count=n())
neighbourhood.count <- neighbourhood.count[order(neighbourhood.count$Count, decreasing = T),]
colnames(neighbourhood.count) <- c("Bairro", "Qtd")
datatable(neighbourhood.count)
barplot(neighbourhood.count$Count,
las=2,
col = rainbow(10),
names.arg = neighbourhood.count$neighbourhood,
main = "Gráfico de Quatidade de Aluguéis por Bairro") #Plota o gráfico das palavra
# Verifica quais bairros têm mais que 200 alugueis
neighbourhood.count <- filter(neighbourhood.count, Count>200)
sum(neighbourhood.count$Count) # A maioria dos dados está inclusa
neighbourhood.mean <- dataset %>% group_by(neighbourhood) %>% summarise(Média=mean(price))
neighbourhood.mean <- neighbourhood.mean[order(neighbourhood.mean$Média, decreasing = T),]
neighbourhood_group.count <- dataset %>% group_by(neighbourhood_group) %>% summarise(Count=n()) #Brooklyn e Manhattan juntos possuiem 85% dos alugueis
datatable(neighbourhood_group.count)
neighbourhood_group.mean <- dataset %>% group_by(neighbourhood_group) %>% summarise(Mean=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
datatable(neighbourhood_group.mean)
# Visualiza distribuição de tipo de quartos por preço e bairro
subset <- dataset %>% select(neighbourhood_group, price, room_type)
ggplot(subset, aes(x = neighbourhood_group,
y = price,
color=room_type)) +
geom_point() +
labs(title = "Distribuição dos tipos de quartos por preço e bairro")
room_type.count <- dataset %>% group_by(room_type) %>% summarise(Count=n()) # A maioria dos alugueis são de casa inteira ou quartos privados
datatable(room_type.count)
room_type.mean <- dataset %>% group_by(room_type) %>% summarise(Mean=mean(price)) # Entire home é bem mais caro
datatable(room_type.mean)
summary(dataset$minimum_nights)# Valor máximo muito alto
# Verifica distribuição de noites mínimas
hist(dataset$minimum_nights)
hist(dataset$minimum_nights[dataset$minimum_nights<10])
length(dataset$minimum_nights[dataset$minimum_nights>30]) # Poucos dados tem noites mínimas maiores que 30
dataset$minimum_nights[dataset$minimum_nights>30] = 30 # Setamos o valor máximo de noites mínimas para 30
hist(dataset$minimum_nights[dataset$minimum_nights<30])
# Plota a matriz de correlação entre as colunas
cor.matriz <- cor(select(dataset, -neighbourhood, -neighbourhood_group, -room_type), use = "complete.obs") #Retira colunas não numéricas
round(cor.matriz, 2)
ggcorrplot(cor.matriz, hc.order = T, lab = T, type = "lower")
# Separa os dados em treino e teste
set.seed(100)
index = sample(1:nrow(dataset), 0.7*nrow(dataset))
train = dataset[index,] # Create the training data
test = dataset[-index,] # Create the test data
dim(train)
dim(test)
# Função para calcular as métricas RMSE e R-squared
eval_metrics = function(model, df, predictions, target){
resids = df[,target] - predictions
resids2 = resids**2
N = length(predictions)
r2 = as.character(round(summary(model)$r.squared, 2))
adj_r2 = as.character(round(summary(model)$adj.r.squared, 2))
cat("Adjusted R-squared: ",adj_r2, " ") #Adjusted R-squared
cat("RMSE: ",as.character(round(sqrt(sum(resids2)/N), 2))) #RMSE
}
# Treina um modelo regressão linear para predizer os preços
modelo <- lm(price ~ neighbourhood_group + room_type + minimum_nights + availability_365, data = train)
summary(modelo1)
predictions = predict(modelo, newdata = train)
eval_metrics(modelo1, train, predictions, target = 'price')
predictions = predict(modelo, newdata = test)
eval_metrics(modelo1, test, predictions, target = 'price')
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
bronx <- dataset %>% filter(neighbourhood_group == "Bronx", room_type == "Entire home")
bronx100 <- bronx %>% filter(price > 100)
# Plota gráfico da regressão linear
visreg(modelo1, "neighbourhood_group", gg = TRUE)
visreg(modelo1, "room_type", gg = TRUE)
visreg(modelo1, "minimum_nights", gg = TRUE)
modelo2 <- lm(price ~ neighbourhood_group + neighbourhood +room_type + minimum_nights + availability_365, data = train)
summary(modelo2)
predictions = predict(modelo, newdata = train)
eval_metrics(modelo1, train, predictions, target = 'price')
predictions = predict(modelo, newdata = test)
eval_metrics(modelo1, test, predictions, target = 'price')
predictions = predict(modelo1, newdata = train)
eval_metrics(modelo1, train, predictions, target = 'price')
predictions = predict(modelo2, newdata = train)
eval_metrics(modelo2, train, predictions, target = 'price')
predictions = predict(modelo2, newdata = test)
# Separa os dados em treino e teste
set.seed(100)
index = sample(1:nrow(dataset), 0.7*nrow(dataset))
train = dataset[index,] # Cria training dataset
test = dataset[-index,] # Cria test dataset
dim(train)
dim(test)
predictions = predict(modelo2, newdata = train)
eval_metrics(modelo2, train, predictions, target = 'price')
predictions = predict(modelo2, newdata = test)
predictions = predict(modelo2, newdata = test)
typeof(test$neighbourhood)
test$neighbourhood
predictions = predict(modelo2, newdata = dataset)
predictions = predict(modelo2, newdata = dataset)
# Separa os dados em treino e teste
set.seed(100)
index = sample(1:nrow(dataset), 0.7*nrow(dataset))
train = dataset[index,] # Cria training dataset
test = dataset[-index,] # Cria test dataset
dim(train)
dim(test)
modelo2 <- lm(price ~ neighbourhood_group + neighbourhood + room_type + minimum_nights + availability_365, data = dataset)
predictions = predict(modelo2, newdata = dataset)
eval_metrics(modelo2, train, predictions, target = 'price')
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test))
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test)[0])
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test)[1])
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
predict.lm(modelo1, data_test)
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test))
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test))
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test))
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test))
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test))
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test))
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Manhattan", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Private room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Bronx", room_type= "Shared room", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
filter(dataset, neighbourhood_group == "Manhattan", room_type == "Entire home")
mean(filter(dataset, neighbourhood_group == "Manhattan", room_type == "Entire home"))
mean(dataset %>% filter(dataset, neighbourhood_group == "Manhattan", room_type == "Entire home") %>% select(price) %>% dataset$price)
neighbourhood_group.mean <- dataset %>% group_by(neighbourhood_group, room_type) %>% summarise(Mean=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
colnames(neighbourhood_group.mean) <- c("Burgo", "Tipo de Quarto", "Média")
kable(neighbourhood_group.count, caption = "Tabela de quantidade de aluguéis por burgo")
neighbourhood_group.mean <- dataset %>% group_by(neighbourhood_group, room_type) %>% summarise(Mean=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
colnames(neighbourhood_group.mean) <- c("Burgo", "Tipo de Quarto", "Média")
kable(neighbourhood_group.mean, caption = "Tabela de quantidade de aluguéis por burgo")
neighbourhood_group.mean <- dataset %>% group_by(neighbourhood_group, room_type) %>% summarise(Mean=mean(price)) #Manhattan é o bairro mais caro e Bronx o mais barato
colnames(neighbourhood_group.mean) <- c("Burgo", "Tipo de Quarto", "Média")
kable(neighbourhood_group.mean, caption = "Tabela de média de preço por burgo e tipo de quarto")
kable(neighbourhood_group.mean, caption = "Tabela de média de preço por burgo e tipo de quarto")
data_test <- data.frame(neighbourhood_group = "Manhattan", neighbourhood = "Hell's Kitchen", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
data_test <- data.frame(neighbourhood_group = "Bronx", neighbourhood = "Allerton", room_type= "Entire home", minimum_nights = 10, availability_365 = 365)
cat("Preço previsto: ", predict.lm(modelo1, data_test), "\n")
mean(dataset$price[dataset$neighbourhood == "Hell's Kitchen" & dataset$neighbourhood_group == "Manhattan" & dataset$room_type == "Entire home"])
mean(dataset$price[dataset$neighbourhood == "Hell's Kitchen" & dataset$neighbourhood_group == "Manhattan" & dataset$room_type == "Entire home"])
mean(dataset$price[dataset$neighbourhood == "Allerton" & dataset$neighbourhood_group == "Bronx" & dataset$room_type == "Entire home"])
cat("Preço médio", mean(dataset$price[dataset$neighbourhood == "Hell's Kitchen" & dataset$neighbourhood_group == "Manhattan" & dataset$room_type == "Entire home"]))
cat("Preço médio", mean(dataset$price[dataset$neighbourhood == "Allerton" & dataset$neighbourhood_group == "Bronx" & dataset$room_type == "Entire home"]))
cat("Preço médio", mean(dataset$price[dataset$neighbourhood == "Hell's Kitchen" & dataset$neighbourhood_group == "Manhattan" & dataset$room_type == "Entire home"]), "\n")
cat("Preço médio", mean(dataset$price[dataset$neighbourhood == "Allerton" & dataset$neighbourhood_group == "Bronx" & dataset$room_type == "Entire home"]))
visreg(modelo1, "neighbourhood_group", gg = TRUE)
visreg(modelo1, "room_type", gg = TRUE)
visreg(modelo1, "minimum_nights", gg = TRUE)
visreg(modelo1, "neighbourhood_group", gg = TRUE)
visreg(modelo1, "room_type", gg = TRUE)
visreg(modelo1, "minimum_nights", gg = TRUE)
visreg(modelo2, "minimum_nights", gg = TRUE)
visreg(modelo1, "neighbourhood_group", gg = TRUE)
visreg(modelo1, "room_type", gg = TRUE)
visreg(modelo1, "minimum_nights", gg = TRUE)
visreg(modelo2, "neighbourhood", gg = TRUE)
visreg(modelo1, "neighbourhood_group", gg = TRUE)
visreg(modelo1, "room_type", gg = TRUE)
visreg(modelo1, "minimum_nights", gg = TRUE)
visreg(modelo1, "availabitity_360", gg = TRUE)
visreg(modelo1, "neighbourhood_group", gg = TRUE)
visreg(modelo1, "room_type", gg = TRUE)
visreg(modelo1, "minimum_nights", gg = TRUE)
visreg(modelo1, "availability_365", gg = TRUE)
visreg(modelo1, "neighbourhood_group", gg = TRUE) +
scale_y_continuous(label = scales::dollar)
visreg(modelo1, "room_type", gg = TRUE) +
scale_y_continuous(label = scales::dollar)
visreg(modelo1, "minimum_nights", gg = TRUE) +
scale_y_continuous(label = scales::dollar)
visreg(modelo1, "availability_365", gg = TRUE) +
scale_y_continuous(label = scales::dollar)
